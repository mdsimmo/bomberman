format:
  # How a basic message looks
  # TODO remove need for empty message check
  # {message}: the message being sent
  message: '{#switch|{message}|||{#green|[Bomberman]} {message}}'
  # How to format a heading
  # {arg0}: The title
  heading: '{#raw}{#yellow|--------} {arg0} {#yellow|---------------}'
  # How to format a list of key-value pairs
  # {arg0}: the maps key
  # {arg1} the map's value
  map: "{#raw}{#switch|{arg1}||| {#gold|{arg0}:} {arg1}}"
  # How to display a list
  # {arg0}: the value of the list
  list: "{#raw}{#switch|{arg0}||| {#gold|*} {arg0}}"
  # Default expansion of foreach
  # {arg0}: the value of the list
  # {arg1}: the index
  foreach: "({arg1}: {arg0})"
  # How to format an item by default
  # {item}: the item to format
  item: '{item|amount}x{item|type}'
game-play:
  # Informs all the other players not involved that a player died
  # {player}: the player who died 
  player-killed: '{player} is out!'
  # The winning text message
  # {player}: the winner
  player-won: '{#title|{#gold|WIN!}||0|60|20}'
  # Sent as the game timer counts down. Called every second
  # {time}: the time till the game begins
  count: '{#title|{#yellow|{time}}||0|17|2}'
  # Sent when the game starts
  started: '{#title|{#white|GO!}||0|20|2}'
# All messages that can be displayed when executing a command.
# Most messages have a {command} argument (TODO: which ones?)
command:
  # How to display command help
  # {command}: The command
  help: |-
    {#|format.heading|Help: {command|name}}
    {command|description}
    {#|format.map|Usage|{command|usage}}
    {#|format.map|Extra|{command|extra}}
    {#|format.map|Flags|{#switch|{command|flags|length}|0|| }}
    {command|flags|foreach|command.flag-list|
    }
  flag-list: '{#|format.map|   -{arg0|name}{#switch|{arg0|ext}|||={arg0|ext}}|{arg0|description}}'
  flag-sort: '{arg0|name}'
  # Shown when a player tries to run a command they do not have permission to use
  deny-permission: '{#red|You do not have permission to use /{command|path}!}'
  # Shown when the player uses a command incorrectly
  # {attempt}: the list of arguments that the player typed
  incorrect-usage: '{#red|Incorrect usage: {command|usage}}'
  # Shown when a player types a command that does not exist
  # {attempt}: the cmd that the player typed
  unknown-command: '{#red|Unknown command: {attempt}}'
  # Shown to the console when it tries to run a command that needs to be done as a player 
  must-be-player: You must be a player
  # Shown when a command needs a number but they typed something else
  # {number}: the string of what they typed (this will _not_ be a number)
  invalid-number: '{number} is not a valid number'
  # Called when a command is cancelled for an unknown reason
  cancelled: Operation cancelled
  # The base command details
  bomberman:
    description: Main command for Bomberman
  # Details for commands which group other commands
  group:
    help: |-
      {#|format.heading|Help: {command|name}}
      {command|children|sort|command.group.sort|foreach|command.group.child|
      }
    usage: '/{command|path} <subcommand>'
    example: ''
    extra: ''
    sort: '{arg0|name}'
    child: '{#|format.map|{arg0|name}|{#switch|{=|{#len|{arg0|description}}>40}|1|{#sub|{arg0|description}|0|40}...|{arg0|description}}}'
  # Commands relating to '/bm start'
  start:
    name: start
    description: Start a game
    usage: /{command|path} <game>
    example: ''
    extra: ''
    flags:
      d:
        description: 'The delay in seconds (default=3)'
        ext: '<delay>'
      o:
        description: 'Override existing timers (default=false)'
    # Message when a player starts an already started arena
    # {game}: the game attempted to be started
    already-started: Game {game} already started
    # Called if game start was called when a timer was already running
    # {game}: the game attempted to be started
    # {time}: the time remaining
    already-counting: Game {game} already counting
    # The game has been started
    # {game}: the game that has been started
    success: Game {game} starting
  # Messages relating to '/bm stop'
  stop:
    name: stop
    description: Stop a game
    usage: /{command|path} <game>
    example: ''
    extra: ''
    # The game hasn't been started so the game cannot be stopped
    # {game}: the game
    not-started: Game {game} hasn't started
    # The game has stopped
    # {game}: the game
    success: Game {game} stopped
    # The timer stopped
    # {game}: the game
    # {time}: time before it would have started
    timer-stopped: Timer cancelled
  # Commands Relating to /bm reload
  reload:
    name: reload
    description: Reloads the config file and resets the arena
    usage: /{command|path} <game>
    example: ''
    extra: ''
    # The game has been reloaded
    # {game}: the game
    success: Game {game} reloaded
    # Error while loading
    # {game}: the game
    cannot-load: Error reloading the game's save file
  configure:
    name: configure
    description: Configure game's settings
    usage: /{command|path} <game>
    example: ''
    extra: '{#gray|{#italic|Creative users only}}'
    # If player tries to edit when not in creative
    # {player}: the player
    prompt-creative: '{#red|You must be in creative}'
    # Various labels in the pop-up menu (no args)
    title:
      main: 'Game Settings'
      general: 'General Settings'
      blocks: 'Block Settings'
      loot: 'Block Loot Table'
      inventory: 'Starting Kit'
    back: 'Menu'
    blocks:
      destructible:
        name: 'Destructible'
        description: 'Semi-solid blocks'
      indestructible:
        name: 'Indestructible'
        description: 'Solid blocks default'
      pass-destroy:
        name: 'Pass Destroy'
        description: 'Non solid blocks default'
      pass-keep:
        name: 'Pass keep'
        description: 'Fire passes through without changing'
    general:
      lives: Lives
      fuse-ticks: Fuse ticks
      fire-ticks: Fire ticks
      immunity-ticks: Immunity ticks
      tnt-block: TNT Block
      fire-item: Fire Item
    loot:
      slot: "Block Group {=|{slot}+1}"
      block: Block Types
      item: Drop
      weight: Weighting
  # Messages relating to '/bm create'
  create:
    name: create
    description: Builds a Bomberman game. Defaults to current axe selection. Use -p and -f to use a saved schematic.
    usage: /{command|path} <name> [options]
    example: /{command|path} mygame -p=bm -f=purple
    extra: 'Mark spawns by writing {#gray|{#italic|[spawn]}} on signs'
    flags:
      p:
        description: Plugin to load schem from (default=WorldEdit)
        ext: [bm|we]
      f:
        description: The schematic file to load
        ext: <file>
      a:
        description: Skip air blocks
      v:
        description: Replace structure void with air
    # The game's name is already used
    # {game}: the game that has the shared name 
    game-exists: Game {game} already exists
    # The game was built successfully
    # {game}: the game that was built
    success: Game {game} created{#switch|{game|spawns}|0| but has no spawns. Did you mark spawns with "[spawn]"?}
    # An exception was thrown while building
    # {error}: the game that was built
    error: |-
      {#red|Build Error: '{error}'
      See console for details. Game creation may be incomplete.
      Was the schematic made in a different WorldEdit version?}
    # Player needs to use WorldEdit to select something to create the game from
    need-selection: Use wooden axe to select a region first
    # The requested schematic was not found
    # {schema}: the file name that was attempted
    schema-not-found: '{#red|Schematic not found: {#italic|{schema}}}'
  # Messages relating to '/bm delete'
  delete:
    name: delete
    description: Deletes a game
    usage: /{command|path} <game>
    example: ''
    extra: ''
    # The game has been deleted
    # {game}: the game that was deleted (this is still a game object)
    success: Game {game} destroyed
  # Messages relating to '/bm list'
  list:
    name: list
    description: Shows all existing games
    usage: /{command|path}
    example: ''
    extra: ''
    # What to show when games are present
    # {games}: a list of games
    games: |-
      {#|format.heading|Games}
      {#switch|{games|length}|0|{#red|No games present}|{games|sort|command.list.sort|foreach|command.list.game|
      }}
    sort: {arg0|name}
    game: |-
      {#|format.map|{arg0|name}|{arg0|players}/{arg0|spawns} ({#switch|{arg0|running}|true|Running|false|Waiting|{#red|?}})}
  # Messages relating to '/bm info'
  info:
    name: info
    description: Show information about a game
    usage: /{command|path} <game>
    example: ''
    extra: ''
    # What info to display about a game
    # {game}: the game
    details: |-
      {#|format.heading|Info: {game|name}}
      {#|format.map|Status|{#switch|{game|running}|true|Playing|false|Waiting|{#red|?}}}
      {#|format.map|Players|{game|players}/{game|spawns}}
      {#|format.map|Init lives|{game|lives}}
      {#|format.map|Init bombs|{game|bombs}}
      {#|format.map|Init power|{game|power}}
      {#|format.map|Location|({game|x}, {game|y}, {game|z})}
      {#|format.map|Schema|{game|schema|name}}
      {#|format.map|Size|[{game|schema|xsize}x{game|schema|ysize}x{game|schema|zsize}]}

  # Commands relating to '/bm join'. Also see 'join.xxx' messages
  join:
    name: join
    description: Join a game
    usage: /{command|path} <game>
    example: ''
    extra: ''
    # The game has no spare spawn points
    # {game}: the game attempted to be joined
    game-full: Game {game} is full
    # Cannot join because the game has already started
    # {game}: the game that couldn't be joined
    game-started: 'Game has already started'
    # Player tried to join a game when they are already playing a game
    # {game}: the game that couldn't be joined
    # {player}: the player joining
    already-joined: 'You are already part of a game'
    # A player has joined the game. Sent to all observers of a game
    # {game}: the game joined
    # {player}: the player who joined
    success: '{player} joined game {game}{#switch|{=|{game|players}=={game|spawns}}|1|{#exec|bm start {game} -d=10}}'
  # Messages relating to '/bm leave'
  leave:
    name: leave
    description: Leave the game
    usage: /{command|path}
    example: ''
    extra: ''
    # The player is not part of any game
    # {player}: player who isn't joined
    not-joined: You're not part of a game
    # Player left successfully
    # {player}: the player that left
    success: '{#gray|{#italic|{player} left game}}{#switch|{=|{game|players}==0}|1|{#exec|bm stop {game}}}'
# For unit testing
dev:
  indexed-list: '({arg1}: {arg0})'
  second-char: '{#sub|{arg0}|1}'
